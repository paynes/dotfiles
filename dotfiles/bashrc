# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
export VAGRANT_DEFAULT_PROVIDER=virtualbox

if tput setaf 1 &> /dev/null; then
	tput sgr0; #reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);

	#Solarized colors, taken from http://git.io/solarized-colors.
	white=$(tput setaf 15);
	blue=$(tput setaf 33);
	violet=$(tput setaf 61);
	red=$(tput setaf 124);
	yellow=$(tput setaf 136);
fi;

#Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${blue}";
fi;

prompt_git() {
	local s='';
	local branchName='';

	#Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		#Check if the current directory is in .git before running git checks.
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			#Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			#Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			#Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			#Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			#Check for stashed files
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;
		fi;

		#Get the short symbolic ref.
		#If HEAD isn't a symbolic ref, get the short SHA for the latest commit
		#Otherwise, just give up
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || git rev-parse --short HEAD 2> /dev/null || echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

#Set the terminal title and prompt
PS1="\[\033]0;\W\007\]"; #working directory base name
PS1+="\[${userStyle}\]\u";
PS1+="\[${white}\] in ";
PS1+="\[${yellow}\]\w";
PS1+="\$(prompt_git \"\[${white}\] on \[${violet}\]\" \"\[${blue}\]\")"; #Git repository details
PS1+="\[${white}\]: \[${reset}\]"; #: (and reset color)

export PS1;
